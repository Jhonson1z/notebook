import{_ as e,c as o,o as a,N as t}from"./chunks/framework.9fe2e29c.js";const q=JSON.parse('{"title":"🤺 如果我从脚手架掏出这些功能，阁下该如何应对？","description":"","frontmatter":{},"headers":[],"relativePath":"my-review/md/my-cli.md"}'),r={name:"my-review/md/my-cli.md"},c=t('<h1 id="🤺-如果我从脚手架掏出这些功能-阁下该如何应对" tabindex="-1">🤺 如果我从脚手架掏出这些功能，阁下该如何应对？ <a class="header-anchor" href="#🤺-如果我从脚手架掏出这些功能-阁下该如何应对" aria-label="Permalink to &quot;🤺 如果我从脚手架掏出这些功能，阁下该如何应对？&quot;">​</a></h1><h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><blockquote><p>由于最近公司的小项目比较多，又刚好落到我头上，所以只能临时抱佛脚疯狂<code>create vite</code>创建新项目，但是佛脚抱多了佛祖也嫌恶心(我瞎说的佛祖别怪我 🐶)，就萌生了自己撸一个脚手架的想法。偏偏我又是一个天马行空(屁事多)的人，于是在我边写边创作的过程中，写出来的&quot;脚手架&quot;也在逐渐偏离它原本的职责...</p></blockquote><h1 id="功能展示" tabindex="-1">功能展示 <a class="header-anchor" href="#功能展示" aria-label="Permalink to &quot;功能展示&quot;">​</a></h1><h2 id="新建" tabindex="-1">新建 <a class="header-anchor" href="#新建" aria-label="Permalink to &quot;新建&quot;">​</a></h2><h3 id="create-project" tabindex="-1"><code>Create Project</code> <a class="header-anchor" href="#create-project" aria-label="Permalink to &quot;`Create Project`&quot;">​</a></h3><p>当然，在开头这个脚手架的方向还是非常正常的，由于公司的项目统一都使用<code>Vite</code>，因此我也将<code>Vite</code>作为我脚手架模板的框架，同时加上了<code>uniapp</code>版本</p><p>下面是<code>create project</code>功能的具体逻辑 👇 <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/webp_images/Create-Project.excalidraw.webp" alt="Create-Project.excalidraw"></p><p>其中<code>johnson-hooks</code>、<code>johnson-utils</code>和<code>johnson-styles</code>是我平时写自己项目或者是工作中常用的一些方法和 hooks，也作为选装项放入创建项目功能中</p><blockquote><p>由于这个功能比较常见，在此就不做演示了</p></blockquote><h3 id="create-module" tabindex="-1"><code>Create Module</code> <a class="header-anchor" href="#create-module" aria-label="Permalink to &quot;`Create Module`&quot;">​</a></h3><blockquote><p>这个命令会帮助你在当前目录下创建一个文件夹或文件，目前文件的可选类型有<code>Vue</code>和<code>TS</code>，如果选择<code>Vue</code>文件则会帮你初始化一份<code>Vue3 setup TypeScript</code>版本的.Vue 文件</p></blockquote><h2 id="服务" tabindex="-1">服务 <a class="header-anchor" href="#服务" aria-label="Permalink to &quot;服务&quot;">​</a></h2><h3 id="server-open" tabindex="-1"><code>Server Open</code> <a class="header-anchor" href="#server-open" aria-label="Permalink to &quot;`Server Open`&quot;">​</a></h3><blockquote><p>这个命令是我在日常工作中使用的最多的，它可以帮助你将<code>package.json</code>文件中<code>scripts</code>的命令全部列出来，然后选择需要启动的服务即可，简直就是我这种懒癌患者的福音! <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/raw_images/server-open.gif" alt="server-open"></p></blockquote><h3 id="server-start" tabindex="-1"><code>Server Start</code> <a class="header-anchor" href="#server-start" aria-label="Permalink to &quot;`Server Start`&quot;">​</a></h3><blockquote><p>如果你需要在本地起一个临时的 node 服务器来做后端时，这个命令会帮到你。只需要输入一个可用端口，脚手架会帮你在<code>当前目录下</code>新建一个<code>JS文件</code>，为你初始化好 node 服务的最基本配置并在输入的端口上启动该服务 <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/raw_images/server-create.gif" alt="server-create"></p></blockquote><h3 id="server-port" tabindex="-1"><code>Server Port</code> <a class="header-anchor" href="#server-port" aria-label="Permalink to &quot;`Server Port`&quot;">​</a></h3><blockquote><p>忘记<code>Windows怎么查看端口占用了?</code>无所谓，<code>fly</code>会出手！只需要输入<code>fly server port</code>即可查看本机被占用的端口 <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/raw_images/server-port.gif" alt="server-port"></p></blockquote><h3 id="server-kill" tabindex="-1"><code>Server Kill</code> <a class="header-anchor" href="#server-kill" aria-label="Permalink to &quot;`Server Kill`&quot;">​</a></h3><blockquote><p>如果你想直接关闭某个端口的进程，使用<code>fly server kill &lt;port&gt;</code>就可以帮你完成 <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/raw_images/server-kill.gif" alt="server-kill"></p></blockquote><h2 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h2><h3 id="delete-filename" tabindex="-1"><code>Delete &lt;fileName&gt;</code> <a class="header-anchor" href="#delete-filename" aria-label="Permalink to &quot;`Delete &lt;fileName&gt;`&quot;">​</a></h3><blockquote><p>使用<code>fly delete &lt;fileName&gt;</code>并确认后即可删除<code>当前目录下</code>的某一文件(请谨慎使用！)</p></blockquote><h2 id="翻译" tabindex="-1">翻译 <a class="header-anchor" href="#翻译" aria-label="Permalink to &quot;翻译&quot;">​</a></h2><h3 id="translate" tabindex="-1"><code>Translate</code> <a class="header-anchor" href="#translate" aria-label="Permalink to &quot;`Translate`&quot;">​</a></h3><blockquote><p>是的你没有看错，<code>fly</code>脚手架甚至还有翻译功能，输入<code>fly translate</code>即可进入选择目标语言界面，确认后即可进入连续对话的翻译页面<br><strong>当输入框为空时<code>输入回车</code>，即可重置目标语言</strong><br><strong>同时，<code>fly</code>的翻译基于语言判断实现，意味着你可以输入任何类型的语言并将其转换成你想要的语言</strong> <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/raw_images/translate.gif" alt="translate"></p></blockquote><h2 id="计时" tabindex="-1">计时 <a class="header-anchor" href="#计时" aria-label="Permalink to &quot;计时&quot;">​</a></h2><h3 id="countdown" tabindex="-1"><code>Countdown</code> <a class="header-anchor" href="#countdown" aria-label="Permalink to &quot;`Countdown`&quot;">​</a></h3><blockquote><p>如果你需要有一个倒计时软件来帮助你管理时间，<code>fly</code>也能做到，只需要输入<code>fly countdown</code>，并输入倒计时名称以及倒计时时间(支持输入秒和<code>HHHH:MM:SS</code>为格式的时间)，即可开启倒计时，当倒计时结束，<code>fly</code>会在桌面给你发送通知 <img src="https://johnson-huang-pic-1312790691.cos.ap-guangzhou.myqcloud.com/raw_images/countdown.gif" alt="countdown"></p></blockquote><h2 id="待完成功能" tabindex="-1">待完成功能 <a class="header-anchor" href="#待完成功能" aria-label="Permalink to &quot;待完成功能&quot;">​</a></h2><ul><li>[ ] NBA 赛事查询(当天)</li><li>[ ] NBA 赛事查询(比赛详情)</li><li>[ ] 压缩文件 ...</li></ul><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记" aria-label="Permalink to &quot;后记&quot;">​</a></h1><p>感谢你看到这里，<code>fly</code>脚手架目前只是我开发的一个小玩具，但希望有一天它可以真的成长为一个成熟的脚手架。如果你有任何有趣的功能推荐，或者说对<code>fly</code>脚手架的功能有任何建议的话，欢迎到评论区留言，感激不尽</p><blockquote><p>对了，如果你想下载<code>fly</code>脚手架，使用<code>npm i -g johnson-cli</code>下载即可</p></blockquote>',35),l=[c];function d(i,n,s,h,u,p){return a(),o("div",null,l)}const b=e(r,[["render",d]]);export{q as __pageData,b as default};
